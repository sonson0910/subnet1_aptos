# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  USE_REAL_APTOS_CLIENT: "false"
  USE_APTOS_CLI: "true"  # Set to false to skip Aptos CLI installation completely

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Aptos CLI
      if: ${{ env.USE_APTOS_CLI == 'true' }}
      run: |
        echo "Installing Aptos CLI binary..."
        # Install OpenSSL 1.1 dependencies for Ubuntu
        sudo apt-get update
        # Try direct install first
        sudo apt-get install -y libssl1.1 || {
          # If direct install fails, add repo with libssl1.1 and try again
          # for Ubuntu 22.04+
          echo "Direct install failed, trying with additional repository..."
          # Add a source that has libssl1.1
          echo "deb http://security.ubuntu.com/ubuntu focal-security main" | sudo tee /etc/apt/sources.list.d/focal-security.list
          sudo apt-get update
          sudo apt-get install -y libssl1.1
        }
        
        # Download and install Aptos CLI
        mkdir -p ~/bin
        curl -fsSL "https://github.com/aptos-labs/aptos-core/releases/download/aptos-cli-v2.3.1/aptos-cli-2.3.1-Ubuntu-x86_64.zip" -o aptos-cli.zip
        unzip -o aptos-cli.zip -d ~/bin
        chmod +x ~/bin/aptos
        
        # Check if Aptos CLI works, but continue even if it doesn't
        if ~/bin/aptos --version; then
          echo "Aptos CLI installed successfully"
        else
          echo "Warning: Aptos CLI installation issue, but continuing with mock client"
          # Create a dummy script for any direct aptos commands that might be used in tests
          echo '#!/bin/bash' > ~/bin/aptos
          echo 'echo "Mock Aptos CLI - Command would have been: aptos $@"' >> ~/bin/aptos
          echo 'echo "Using mock since actual CLI could not be installed in CI environment"' >> ~/bin/aptos
          echo 'exit 0' >> ~/bin/aptos
          chmod +x ~/bin/aptos
        fi
        
        echo "$HOME/bin" >> $GITHUB_PATH
    
    - name: Create Mock Aptos CLI (if skipped installation)
      if: ${{ env.USE_APTOS_CLI != 'true' }}
      run: |
        echo "Skipping Aptos CLI installation, creating mock instead..."
        mkdir -p ~/bin
        echo '#!/bin/bash' > ~/bin/aptos
        echo 'echo "Mock Aptos CLI - Command would have been: aptos $@"' >> ~/bin/aptos
        echo 'echo "Using mock since Aptos CLI installation was skipped"' >> ~/bin/aptos
        echo 'exit 0' >> ~/bin/aptos
        chmod +x ~/bin/aptos
        echo "$HOME/bin" >> $GITHUB_PATH
    
    - name: Set USE_REAL_APTOS_CLIENT environment variable
      run: echo "USE_REAL_APTOS_CLIENT=false" >> $GITHUB_ENV
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pytest-asyncio
        # Install CI-specific requirements file that excludes aptos-cli
        python -m pip install -r requirements-ci.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # Note: We fixed three F823 errors in query_cli.py (node_url variable referenced before assignment)
        # and one F824 error in main.py (global main_loop_task is unused)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with mock client
      env:
        USE_REAL_APTOS_CLIENT: "false"
      run: |
        cd tests/aptos
        # Run tests in CI mode (only runs tests known to work in CI environment)
        python run_tests_with_mock.py --ci
        
    - name: Final status message
      run: |
        echo "Tests completed. Some tests may have been skipped in CI but should work locally with proper setup."
