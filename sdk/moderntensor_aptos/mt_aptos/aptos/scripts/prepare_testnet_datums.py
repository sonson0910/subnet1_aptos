# File: sdk/aptos/scripts/prepare_aptos_testnet.py
# Chu·∫©n b·ªã v√† g·ª≠i c√°c d·ªØ li·ªáu ban ƒë·∫ßu cho Miners v√† Validators l√™n Aptos Testnet.

import os
import sys
import logging
import asyncio
import hashlib
from pathlib import Path
from dotenv import load_dotenv
from typing import Optional, List, Dict, Any
from rich.logging import RichHandler
from rich.console import Console

# Import Aptos SDK
from mt_aptos.account import Account, AccountAddress
from mt_aptos.async_client import RestClient
from mt_aptos.bcs import Serializer
from mt_aptos.transactions import EntryFunction, TransactionArgument

# --- Th√™m ƒë∆∞·ªùng d·∫´n g·ªëc c·ªßa project v√†o sys.path ---
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))
# -------------------------------------------------

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ SDK ModernTensor
try:
    from mt_aptos.metagraph.metagraph_datum import STATUS_ACTIVE
    from mt_aptos.core.datatypes import MinerInfo, ValidatorInfo
    from mt_aptos.aptos import ModernTensorClient
    from mt_aptos.keymanager.wallet_manager import WalletManager
    from mt_aptos.config.settings import settings as sdk_settings
except ImportError as e:
    print(f"‚ùå FATAL: Import Error in prepare_aptos_testnet.py: {e}")
    sys.exit(1)

# --- T·∫£i bi·∫øn m√¥i tr∆∞·ªùng ---
env_path = project_root / ".env"

# --- C·∫•u h√¨nh Logging v·ªõi RichHandler ---
log_level_str = os.getenv("LOG_LEVEL", "INFO").upper()
log_level = getattr(logging, log_level_str, logging.INFO)
rich_handler = RichHandler(
    show_time=True,
    show_level=True,
    show_path=False,
    markup=True,
    rich_tracebacks=True,
    log_time_format="[%Y-%m-%d %H:%M:%S]",
)
logging.basicConfig(
    level=log_level, format="%(message)s", datefmt="[%X]", handlers=[rich_handler]
)
logger = logging.getLogger(__name__)
console = Console()

# ------------------------

# --- T·∫£i bi·∫øn m√¥i tr∆∞·ªùng (sau khi logger ƒë∆∞·ª£c c·∫•u h√¨nh) ---
if env_path.exists():
    logger.info(f"üìÑ Loading environment variables from: {env_path}")
    load_dotenv(dotenv_path=env_path, override=True)
else:
    logger.warning(f"üìÑ Environment file (.env) not found at {env_path}.")
# --------------------------

# --- L·∫•y c·∫•u h√¨nh v√≠ Funding ---
FUNDING_COLDKEY_NAME = os.getenv("FUNDING_COLDKEY_NAME", "kickoff")
FUNDING_HOTKEY_NAME = os.getenv("FUNDING_HOTKEY_NAME", "hk1")
FUNDING_PASSWORD = os.getenv("FUNDING_PASSWORD")
HOTKEY_BASE_DIR = os.getenv(
    "HOTKEY_BASE_DIR", getattr(sdk_settings, "HOTKEY_BASE_DIR", "moderntensor")
)

# Aptos configuration
APTOS_NODE_URL = os.getenv("APTOS_NODE_URL", sdk_settings.APTOS_NODE_URL)
APTOS_CONTRACT_ADDRESS = os.getenv("APTOS_CONTRACT_ADDRESS", sdk_settings.APTOS_CONTRACT_ADDRESS)
APTOS_NETWORK = os.getenv("APTOS_NETWORK", sdk_settings.APTOS_NETWORK)

# --- Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc ---
required_env_vars = {
    "SUBNET1_MINER_ID": os.getenv("SUBNET1_MINER_ID"),
    "SUBNET1_VALIDATOR_UID": os.getenv("SUBNET1_VALIDATOR_UID"),
    "FUNDING_COLDKEY_NAME": FUNDING_COLDKEY_NAME,
    "FUNDING_HOTKEY_NAME": FUNDING_HOTKEY_NAME,
    "FUNDING_PASSWORD": FUNDING_PASSWORD,
    "APTOS_CONTRACT_ADDRESS": APTOS_CONTRACT_ADDRESS,
}
missing_vars = [k for k, v in required_env_vars.items() if not v]
if missing_vars:
    logger.error(
        f"FATAL: Missing required environment variables: {', '.join(missing_vars)}"
    )
    sys.exit(1)
# --------------------------------------------------

# === Constants ===
SUBNET_ID_TO_USE = 1


# === Helper Functions ===
def load_funding_account(
    base_dir: str, coldkey_name: str, hotkey_name: str, password: str
) -> Account:
    """Loads funding account from wallet."""
    logger.info(
        f"üîë Loading funding account (Cold: '{coldkey_name}', Hot: '{hotkey_name}')..."
    )
    try:
        wm = WalletManager(network=APTOS_NETWORK, base_dir=base_dir)
        key_info = wm.get_hotkey_info(coldkey_name, hotkey_name)
        
        if not key_info or "encrypted_data" not in key_info:
            raise ValueError(f"Could not find hotkey data for {hotkey_name}")
        
        # Load the coldkey to decrypt the hotkey
        coldkey_data = wm.load_coldkey(coldkey_name, password)
        if not coldkey_data:
            raise ValueError(f"Failed to load coldkey {coldkey_name}")
        
        # Get the private key from the encrypted data
        from mt_aptos.keymanager.decryption_utils import decode_hotkey_data
        private_key = decode_hotkey_data(key_info["encrypted_data"], password)
        
        # Create Account from private key
        account = Account.load_key(private_key)
        
        logger.info(f"‚úÖ Funding account loaded. Address: [cyan]{account.address().hex()}[/]")
        return account
    except Exception as e:
        logger.exception(f"üí• Failed to load funding account: {e}")
        raise


# === Main Async Function ===
async def prepare_datums():
    """Main async function to prepare and submit initial datums to Aptos."""
    logger.info(
        "‚ú® --- Starting Aptos Datum Preparation Script --- ‚ú®"
    )

    # --- Load Funding Account ---
    try:
        hotkey_base_dir = os.getenv(
            "HOTKEY_BASE_DIR", getattr(sdk_settings, "HOTKEY_BASE_DIR", "moderntensor")
        )
        funding_coldkey = os.getenv("FUNDING_COLDKEY_NAME", "kickoff")
        funding_hotkey = os.getenv("FUNDING_HOTKEY_NAME", "hk1")
        funding_password = os.getenv("FUNDING_PASSWORD")

        if not funding_coldkey:
            raise ValueError(
                "FUNDING_COLDKEY_NAME is missing or empty in .env and no default specified."
            )
        if not funding_hotkey:
            raise ValueError(
                "FUNDING_HOTKEY_NAME is missing or empty in .env and no default specified."
            )
        if not funding_password:
            raise ValueError("FUNDING_PASSWORD environment variable is not set.")
        if not hotkey_base_dir:
            raise ValueError(
                "Could not determine HOTKEY_BASE_DIR (checked .env and sdk_settings)."
            )

        funding_account = load_funding_account(
            hotkey_base_dir, funding_coldkey, funding_hotkey, funding_password
        )
    except Exception as fund_err:
        logger.exception(f"üí• Error loading funding account: {fund_err}")
        sys.exit(1)

    # --- Create Aptos Client ---
    try:
        logger.info(f"üåê Connecting to Aptos node at {APTOS_NODE_URL}...")
        rest_client = RestClient(APTOS_NODE_URL)
        
        # Check if the node is reachable
        ledger_info = await rest_client.ledger_information()
        logger.info(f"‚úÖ Connected to Aptos node. Chain ID: {ledger_info.get('chain_id')}")
        
        # Create ModernTensor client
        client = ModernTensorClient(
            account=funding_account,
            node_url=APTOS_NODE_URL,
            contract_address=APTOS_CONTRACT_ADDRESS
        )
    except Exception as client_err:
        logger.exception(f"üí• Error creating Aptos client: {client_err}")
        sys.exit(1)

    # --- Load Initial Validators and Miners Info from .env ---
    logger.info("üë• Loading initial validator and miner configurations from .env...")
    validators_info: List[ValidatorInfo] = []
    miners_info: List[MinerInfo] = []

    try:
        # -- Validators --
        subnet1_validator_uid = os.getenv("SUBNET1_VALIDATOR_UID")
        if subnet1_validator_uid:
            # Generate a validator address - this would typically be a wallet address
            validator_address = os.getenv("SUBNET1_VALIDATOR_ADDRESS", funding_account.address().hex())
            validator_api = os.getenv("SUBNET1_VALIDATOR_API", "http://localhost:8001")
            
            validator_info = ValidatorInfo(
                uid=subnet1_validator_uid,
                address=validator_address,
                api_endpoint=validator_api,
                trust_score=0.5,  # Initial trust score
                weight=1.0,       # Initial weight
                stake=1000 * 10**8,  # 1000 APT in octas
                subnet_uid=SUBNET_ID_TO_USE,
                status=STATUS_ACTIVE,
                registration_time=int(ledger_info.get('ledger_timestamp', '0')) // 1_000_000  # Convert to seconds
            )
            validators_info.append(validator_info)
            logger.info(f"‚úÖ Added validator: {validator_info.uid} at {validator_info.api_endpoint}")
        
        # -- Miners --
        subnet1_miner_id = os.getenv("SUBNET1_MINER_ID")
        if subnet1_miner_id:
            # Generate a miner address - this would typically be a wallet address
            miner_address = os.getenv("SUBNET1_MINER_ADDRESS", "0x" + os.urandom(32).hex()[:40])
            miner_api = os.getenv("SUBNET1_MINER_API", "http://localhost:8002")
            
            miner_info = MinerInfo(
                uid=subnet1_miner_id,
                address=miner_address,
                api_endpoint=miner_api,
                trust_score=0.5,  # Initial trust score
                weight=1.0,       # Initial weight
                stake=500 * 10**8,  # 500 APT in octas
                subnet_uid=SUBNET_ID_TO_USE,
                status=STATUS_ACTIVE,
                registration_time=int(ledger_info.get('ledger_timestamp', '0')) // 1_000_000  # Convert to seconds
            )
            miners_info.append(miner_info)
            logger.info(f"‚úÖ Added miner: {miner_info.uid} at {miner_info.api_endpoint}")
    except Exception as info_err:
        logger.exception(f"üí• Error creating validator/miner info: {info_err}")
        sys.exit(1)

    # --- Check Funding Account Balance ---
    try:
        resources = await rest_client.account_resources(funding_account.address().hex())
        apt_balance = None
        for resource in resources:
            if resource["type"] == "0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>":
                apt_balance = int(resource["data"]["coin"]["value"]) / 10**8
                break
        
        if apt_balance is not None:
            logger.info(f"üí∞ Funding Account Balance: {apt_balance} APT")
            if apt_balance < 10:
                logger.warning(f"‚ö†Ô∏è Low balance! Only {apt_balance} APT available. Consider getting more tokens.")
        else:
            logger.warning("‚ö†Ô∏è Could not determine funding account balance.")
    except Exception as balance_err:
        logger.exception(f"üí• Error checking account balance: {balance_err}")
        # Continue even if balance check fails

    # --- Create Subnet if needed ---
    try:
        # Check if subnet exists
        subnet_exists = await client.subnet_exists(SUBNET_ID_TO_USE)
        
        if not subnet_exists:
            logger.info(f"üåê Creating subnet with ID {SUBNET_ID_TO_USE}...")
            
            # Create subnet transaction
            result = await client.create_subnet(
                subnet_id=SUBNET_ID_TO_USE,
                name="TestSubnet",
                description="Test subnet for ModernTensor on Aptos",
                owner=funding_account.address().hex(),
                min_stake_validator=1000 * 10**8,  # 1000 APT in octas
                min_stake_miner=500 * 10**8,      # 500 APT in octas
                max_validators=100,
                max_miners=1000,
                registration_open=True
            )
            
            if result and "hash" in result:
                logger.info(f"‚úÖ Subnet created. Transaction hash: {result['hash']}")
                # Wait a bit for transaction to be processed
                logger.info("‚è≥ Waiting for transaction to be processed...")
                await asyncio.sleep(5)
            else:
                logger.error(f"‚ùå Failed to create subnet: {result}")
                sys.exit(1)
        else:
            logger.info(f"‚úÖ Subnet {SUBNET_ID_TO_USE} already exists.")
    except Exception as subnet_err:
        logger.exception(f"üí• Error creating subnet: {subnet_err}")
        sys.exit(1)

    # --- Register Validators ---
    for validator in validators_info:
        try:
            logger.info(f"üîç Checking if validator {validator.uid} is already registered...")
            validator_exists = await client.validator_exists(validator.uid)
            
            if not validator_exists:
                logger.info(f"üîÑ Registering validator {validator.uid}...")
                result = await client.register_validator(
                    subnet_id=validator.subnet_uid,
                    validator_uid=validator.uid,
                    address=validator.address,
                    api_endpoint=validator.api_endpoint or "",
                    stake_amount=validator.stake
                )
                
                if result and "hash" in result:
                    logger.info(f"‚úÖ Validator registered. Transaction hash: {result['hash']}")
                    # Wait a bit for transaction to be processed
                    await asyncio.sleep(5)
                else:
                    logger.error(f"‚ùå Failed to register validator: {result}")
            else:
                logger.info(f"‚úÖ Validator {validator.uid} already registered.")
        except Exception as val_err:
            logger.exception(f"üí• Error registering validator {validator.uid}: {val_err}")

    # --- Register Miners ---
    for miner in miners_info:
        try:
            logger.info(f"üîç Checking if miner {miner.uid} is already registered...")
            miner_exists = await client.miner_exists(miner.uid)
            
            if not miner_exists:
                logger.info(f"üîÑ Registering miner {miner.uid}...")
                result = await client.register_miner(
                    subnet_id=miner.subnet_uid,
                    miner_uid=miner.uid,
                    address=miner.address,
                    api_endpoint=miner.api_endpoint or "",
                    stake_amount=miner.stake
                )
                
                if result and "hash" in result:
                    logger.info(f"‚úÖ Miner registered. Transaction hash: {result['hash']}")
                    # Wait a bit for transaction to be processed
                    await asyncio.sleep(5)
                else:
                    logger.error(f"‚ùå Failed to register miner: {result}")
            else:
                logger.info(f"‚úÖ Miner {miner.uid} already registered.")
        except Exception as miner_err:
            logger.exception(f"üí• Error registering miner {miner.uid}: {miner_err}")

    # --- Show Summary ---
    logger.info("üìã Summary of operations:")
    logger.info(f"  - Subnet created/confirmed: ID {SUBNET_ID_TO_USE}")
    logger.info(f"  - Validators registered: {len(validators_info)}")
    logger.info(f"  - Miners registered: {len(miners_info)}")
    
    # Link to explorer
    explorer_url = f"https://explorer.aptoslabs.com/account/{APTOS_CONTRACT_ADDRESS}?network={APTOS_NETWORK}"
    logger.info(f"üîó View contract on explorer: {explorer_url}")
    
    logger.info("‚ú® Datum preparation completed! ‚ú®")


if __name__ == "__main__":
    try:
        asyncio.run(prepare_datums())
    except KeyboardInterrupt:
        logger.info("üõë Script interrupted by user.")
    except Exception as e:
        logger.exception(f"üí• Unhandled error: {e}")
        sys.exit(1)
