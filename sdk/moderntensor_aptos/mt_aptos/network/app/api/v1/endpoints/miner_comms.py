# File m·ªõi: sdk/network/app/api/v1/endpoints/miner_comms.py

import logging
from typing import Annotated
from fastapi import APIRouter, Depends, HTTPException, status

# Import c√°c model v√† dependencies
from mt_aptos.network.server import ResultModel  # Model k·∫øt qu·∫£ t·ª´ miner
from mt_aptos.core.datatypes import MinerResult  # Datatype n·ªôi b·ªô
from mt_aptos.consensus.node import ValidatorNode
from mt_aptos.network.app.dependencies import get_validator_node
import time

logger = logging.getLogger(__name__)
router = APIRouter()


@router.post(
    "/miner/submit_result",
    summary="Miner g·ª≠i k·∫øt qu·∫£ Task",
    description="Endpoint ƒë·ªÉ Miner g·ª≠i ƒë·ªëi t∆∞·ª£ng ResultModel sau khi ho√†n th√†nh task.",
    status_code=status.HTTP_202_ACCEPTED,
)
async def submit_miner_result(
    result_payload: ResultModel,  # Nh·∫≠n payload t·ª´ miner
    node: Annotated[ValidatorNode, Depends(get_validator_node)],
):
    """
    Nh·∫≠n k·∫øt qu·∫£ t·ª´ Miner (ResultModel), chuy·ªÉn ƒë·ªïi th√†nh MinerResult v√† th√™m v√†o node.
    """
    # ƒê·ªçc tr·ª±c ti·∫øp t·ª´ ResultModel ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
    log_task_id = result_payload.task_id
    log_miner_uid = result_payload.miner_uid
    log_result_data_summary = str(result_payload.result_data)[
        :100
    ]  # Log m·ªôt ph·∫ßn result_data

    logger.info(
        f"API: Received result submission for task [yellow]{log_task_id}[/yellow] from miner [cyan]{log_miner_uid}[/cyan]"
    )
    logger.debug(f"   Result Data Received: {log_result_data_summary}...")

    # --- Chuy·ªÉn ƒë·ªïi ResultModel (API) sang MinerResult (Core) ---
    try:
        internal_result = MinerResult(
            task_id=log_task_id,
            miner_uid=log_miner_uid,
            # G√°n tr·ª±c ti·∫øp dict result_data nh·∫≠n ƒë∆∞·ª£c
            result_data=result_payload.result_data,
            timestamp_received=time.time(),
        )
        logger.debug(f"Converted to internal MinerResult: {internal_result}")

        # --- G·ªçi ph∆∞∆°ng th·ª©c c·ªßa Node ---
        success = await node.add_miner_result(internal_result)

        # --- X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ ---
        if success:
            logger.info(
                f"‚úÖ Result for task [yellow]{internal_result.task_id}[/yellow] successfully added by node."
            )
            return {"message": f"Result for task {internal_result.task_id} accepted."}
        else:
            logger.warning(
                f"‚ö†Ô∏è Result for task [yellow]{internal_result.task_id}[/yellow] rejected by node."
            )
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Result rejected by validator node (e.g., duplicate, wrong cycle, invalid data).",
            )

    except HTTPException as http_exc:
        raise http_exc
    except Exception as e:
        # Log d√πng task_id nh·∫≠n ƒë∆∞·ª£c
        logger.exception(
            f"üí• API: Internal error processing result submission for task [yellow]{log_task_id}[/yellow]: {e}"
        )
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error processing result.",
        )
    # ----------------------------------------------------------
